#!/usr/bin/ruby
# -*- coding: utf-8 -*-
#

require 'gyazz'

#module Gyazz
#  class Wiki
#    def get(path, query={})
#      res = HTTParty.get "#{@host}#{path}", :query => query, :basic_auth => @basic_auth, :timeout => 1000000
#      case res.code
#      when 200
#        return res.body
#      else
#        raise Gyazz::Error, res.body
#      end
#    end
#
#    def post(path, opts)
#      opts[:basic_auth] = @basic_auth if @basic_auth
#      opts[:timeout] = 1000000
#
#      res = HTTParty.post "#{@host}#{path}", opts
#      case res.code
#      when 200
#        return res.body
#      else
#        raise Gyazz::Error, res.body
#      end
#    end
#  end
#end

def output(word,yomi,cat,nextcat)
  yomis = yomi.split(/\s+/)
  yomis.each { |yomi|
    puts "#{yomi} #{word} #{cat} #{nextcat}"
  }
end

wiki = Gyazz::Wiki.new('Gictionary')

pages = wiki.pages(:timeout => 1000000).each { |page|
  a = page.text.split(/\n/)
  count = 0
  yomi = ''
  cat = ''
  nextcat = ''
  a.each { |line|
#    puts line
#    puts line[0]
    if line =~ /^---/ then
      if count > 0 then
        output(page.name,yomi,cat,nextcat)
        count = 0
      end
    elsif count == 0 && (line[0] == 0xe3 || line !~ /\[\[.*\]\]/) then
      yomi = line
      count = 1
    elsif count == 1 then
      cat = line
      count = 2
    elsif count == 2 && line !~ /^[\x00-\x7f]/ then
      nextcat = line
      count = 3
    end
  }
  if count > 0 then
    output(page.name,yomi,cat,nextcat)
    count = 0
  end
}
